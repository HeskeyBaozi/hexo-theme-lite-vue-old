{"title":"Beautiful co","slug":"go-with-co","date":"2016-08-27T13:02:35.000Z","updated":"2016-08-27T13:02:35.000Z","comments":true,"path":"api/articles/go-with-co.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"yieldable\"><a href=\"#yieldable\" class=\"headerlink\" title=\"yieldable\"></a>yieldable</h1><blockquote>\n<p>The <code>yieldable</code> objects currently supported are:</p>\n<ul>\n<li>promises</li>\n<li>thunks (functions)</li>\n<li>array (parallel execution)</li>\n<li>objects (parallel execution)</li>\n<li>generators (delegation)</li>\n<li>generator functions (delegation)<br>Nested <code>yieldable</code> objects are supported, meaning you can nest promises within objects within arrays, and so on!</li>\n</ul>\n</blockquote>\n<h2 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h2><p><code>promises</code>是一个典型的<code>thenable</code>兼<code>yieldable</code>对象.</p>\n<p>我的部分co实现:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ./go-with-co.min.js</span></div><div class=\"line\"><span class=\"keyword\">const</span> onRejected = <span class=\"function\"><span class=\"params\">promiseValue</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> state;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        state = gen.throw(promiseValue);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(state.value); <span class=\"comment\">// 输出得到的promise</span></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</div><div class=\"line\">            reject(error);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    next(state);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'./go-with-co.min.js'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> readFail = <span class=\"function\">(<span class=\"params\">msg, time</span>)=&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span> &#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</div><div class=\"line\">            reject(msg);</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> msg = <span class=\"keyword\">yield</span> readFail(<span class=\"string\">'boom!!'</span>, <span class=\"number\">1500</span>); <span class=\"comment\">// promise1</span></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`inner error:<span class=\"subst\">$&#123;e&#125;</span>`</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span> &#123; <span class=\"comment\">// promise2</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'我要resolve'</span>);</div><div class=\"line\">        resolve(<span class=\"string\">'resolve成功'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`msg = <span class=\"subst\">$&#123;msg&#125;</span>, res = <span class=\"subst\">$&#123;res&#125;</span>`</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">str</span>=&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`outter error : <span class=\"subst\">$&#123;str&#125;</span>`</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">inner error:boom!!</div><div class=\"line\">我要resolve</div><div class=\"line\">Promise &#123; &apos;resolve成功&apos; &#125;</div><div class=\"line\">msg = undefined, res = resolve成功</div></pre></td></tr></table></figure></p>\n<p>可以发现, <code>onFulfilled()</code>函数和<code>onRejected()</code>的主要作用就是推进<code>generator</code>函数状态向下转变, 并且把下一状态的<code>promise</code>传递给<code>next()</code>函数处理.</p>\n<p>要注意的是, <code>onFulfilled()</code>函数和<code>onRejected()</code>函数接受的参数是上一个状态的<code>yield</code>值, 而且下一状态的<code>yield</code>右侧的<code>promise</code>对象或其他<code>yieldable</code>对象内的<code>executor()</code>函数已经执行完, 也就是说<code>promise</code>对象的状态会在下一次线程空闲的之后改变状态, 在此之前, <code>onFulfilled()</code>函数和<code>onRejected()</code>函数会将这个状态传递给<code>next()</code>函数处理, 交由<code>next()</code>函数注册回调.</p>\n<p>那么<code>onFulfilled()</code>函数和<code>onRejected()</code>函数就好像是外面把控制权交还给<code>generator</code>函数执行, 然后再通过<code>yield</code>将执行权传给外界.</p>\n<h2 id=\"thunks\"><a href=\"#thunks\" class=\"headerlink\" title=\"thunks\"></a>thunks</h2><ul>\n<li><a href=\"http://es6.ruanyifeng.com/#docs/async#Thunk函数\" target=\"_blank\" rel=\"external\">异步操作与Async函数#Thunk函数</a></li>\n</ul>\n<blockquote>\n<p><code>thunk</code>函数是”传名调用”的一种实现策略，用来替换某个表达式.<br>在<code>JavaScript</code>语言中，<code>Thunk</code>函数替换的不是表达式，而是多参数函数，将其替换成单参数的版本，且只接受回调函数作为参数。</p>\n</blockquote>\n","categories":[],"tags":[]}